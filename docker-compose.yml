version: '3.9'

networks:
  msvcs-book-store:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper-server
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - msvcs-book-store

  kafka-server:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-server
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-server:9092,PLAINTEXT_INTERNAL://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - msvcs-book-store

  service-mysql:
    image: mysql
    container_name: msvc-mysql
    ports:
      - "3307:3306"
    environment:
      #MYSQL_DATABASE: MicroFullAuth
      MYSQL_ROOT_PASSWORD: ImNotlol12msvc
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: always
    networks:
      - msvcs-book-store

  service-mongo:
    image: mongo:6.0.3
    container_name: msvc-mongo
    ports:
      - "27018:27017"
    volumes:
      - ./init.js:/docker-entrypoint-initdb.d/init.js
    restart: always
    networks:
      - msvcs-book-store

  service-postgres:
    image: postgres
    container_name: msvc-postgresql
    ports:
      - "5433:5432"
    volumes:
      - ./initPost.sql:/docker-entrypoint-initdb.d/initPost.sql
#    env_file:
#      - .env
    environment:
      #POSTGRES_DB: msvc_hotel
      POSTGRES_PASSWORD: ImNotlol12msvc
    restart: always
    networks:
      - msvcs-book-store

  config-server:
    image: config-server-store-img
    container_name: config-server-store
    ports:
      - "8888:8888"
    networks:
      - msvcs-book-store

  eureka-server:
#    build:
#      context: ./eureka-server # Ruta al Dockerfile
    image: eureka-server-store-img # Nombre y etiqueta de la imagen
    container_name: eureka-server-store
    ports:
      - "8761:8761"
#    env_file:
#      - .env
#    environment:
#      ACTIVE_PROFILE: ${activeProfile}
    depends_on: # Se ejecuta despu√©s de estos servicios
      - config-server
    networks:
      - msvcs-book-store

  gateway-server:
    image: gateway-server-store-img
    container_name: gateway-server-store
    ports:
      - "8080:8080"
    depends_on:
      - eureka-server
      - config-server
    networks:
      - msvcs-book-store

  auth-service:
    image: auth-service-store-img
    container_name: auth-service-store
    ports:
      - "8081:8081"
    depends_on:
      - eureka-server
      - config-server
      - service-mysql
    networks:
      - msvcs-book-store


  book-service:
    image: book-service-store-img
    container_name: book-service-store
#    env_file:
#      - .env
#    environment:
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#      ACTIVE_PROFILE: ${activeProfile}
#      EUREKA_USERNAME: ${EUREKA_USERNAME}
#      EUREKA_PASSWORD: ${EUREKA_PASSWORD}
    ports:
      - "8082:8082"
    depends_on:
      - kafka-server
      - eureka-server
      - config-server
      - service-mysql
    networks:
      - msvcs-book-store

  catalog-service:
    image: catalog-service-store-img
    container_name: catalog-service-store
    ports:
      - "8083:8083"
    depends_on:
      - eureka-server
      - config-server
      - service-mongo
    networks:
      - msvcs-book-store

  order-service:
    image: order-service-store-img
    container_name: order-service-store
    ports:
      - "8084:8084"
    depends_on:
      - eureka-server
      - config-server
      - service-postgres
    networks:
      - msvcs-book-store

  payment-service:
    image: payment-service-store-img
    container_name: payment-service-store
    ports:
      - "8085:8085"
    depends_on:
      - eureka-server
      - config-server
      - service-mysql
    networks:
      - msvcs-book-store